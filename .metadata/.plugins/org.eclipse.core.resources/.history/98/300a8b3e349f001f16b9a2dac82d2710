package com.nsga;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Set;

class Temporary{
	Set<Individual> set;
	int id;
	int n;
	public Temporary() {
		set = new HashSet<>();
		n = 0;
		id = 0;
	}
}

public class AssignRank {
	
	static int N ;
	
	private static boolean checkDominance(Individual soln_1 , Individual soln_2)
	{
		int n = soln_1.objectives.length;
		
//		checks whether the soln-1 dominates the soln-2
		
		boolean flag = true;
		
		for(int k=0;k<n;k++)
		{
			double obj_1 = soln_1.objectives[k];
			double obj_2 = soln_2.objectives[k];
			
			if(obj_1 >= obj_2)
			{
				flag = false;
				break;
			}
		}
		
		return flag;
	}
	
	private static void stage_1( List<Individual> population , PriorityQueue<Individual> queue ,List<Temporary> ranks) {
		
		for(int i=0;i<N;i++)
		{
			
			for(int j=0; j<N && i!=j;j++)
			{
				
				if( checkDominance(population.get(i), population.get(j)) )
				{
					ranks.get(i).set.add(population.get(j));
				}
				else if(checkDominance(population.get(j), population.get(i ))) {
					ranks.get(i).n += 1;
				}
			}
			
			if(ranks.get(i).n == 0)
			{
				population.get(i).rank = 1;
				queue.offer(population.get(i));
			}
		}
		
	}
	
	public static void findRank(List<Individual> population) {
		
		Queue<PriorityQueue<Individual>> fronts = new LinkedList<>();
		
		List<Temporary> ranks = new ArrayList<Temporary>();
		
		N =population.size();
		
		for(int i=0;i<N;i++)
		{
			ranks.add(new Temporary());
			ranks.get(i).id = i;
		}
		
		PriorityQueue<Individual> queue = new PriorityQueue<Individual>((a,b)-> (int) b.crowding_distance - (int) a.crowding_distance);
		
		stage_1(population, queue, ranks);
		
		fronts.add(queue);
		
//		for(Temporary temp:ranks)
//		{
//			System.out.println(temp.id+" "+temp.n);
//		}
		
//		for(Individual ind:queue)
//		{
//			System.out.println(ind.rank);
//		}
		
		System.out.println(queue.size());
		System.out.println("**********************************************************");
		
		
	}

}
