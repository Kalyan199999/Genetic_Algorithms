package com.nsga;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Set;

class Temporary{
	Set<Individual> set;
	int n;
	public Temporary() {
		set = new HashSet<>();
		n = 0;
	}
}

public class AssignRank {
	
	static int N ;
	
	private static void stage_1(List<Individual> population , PriorityQueue<Individual> queue ,List<Temporary> ranks) {
		
		for(int i=0;i<N;i++)
		{
			int n = population.get(i).objectives.length;
			
			
			for(int j=0; j<N && i!=j;j++)
			{
//				checks whether the soln-i demonates the soln-j
				boolean flag = true;
				
				for(int k=0;k<n;k++)
				{
					double obj_1 = population.get(i).objectives[k];
					double obj_2 = population.get(j).objectives[k];
					
					if(obj_1 >= obj_2)
					{
						flag = false;
						break;
					}
				}
				
				if(false)
				{
					
				}
			}
		}
		
	}
	
	public static void findRank(List<Individual> population) {
		
		Queue<PriorityQueue<Individual>> fronts = new LinkedList<>();
		
		List<Temporary> ranks = new ArrayList<Temporary>();
		
		N =population.size();
		
		for(int i=0;i<N;i++)
		{
			ranks.add(new Temporary());
		}
		
		PriorityQueue<Individual> queue = new PriorityQueue<Individual>((a,b)-> (int) b.crowding_distance - (int) a.crowding_distance);
		
		stage_1(population, queue, ranks);
		fronts.add(queue);
		
		
	}

}
