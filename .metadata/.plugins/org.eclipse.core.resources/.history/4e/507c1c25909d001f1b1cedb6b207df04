package com.generalframework;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.PriorityQueue;



public class Main {
	
	private static void show(List<Individual> population) 
	{
		List<String> chromos = new ArrayList<>();
		
		System.out.print("[");
		
		for(Individual ind:population)
		{
			System.out.print(ind.FITNESS+" , ");
//			String chrmo = "";
//			
//			for(int x:ind.CHROMOSOME)
//			{
//				chrmo += x;
//			}
//			chromos.add(chrmo);
			
		}
		System.out.println("]");
//		System.out.println(chromos);
		
//		for(Individual ind:population)
//		{
//			System.out.println(ind.XBIN[0]);
//			System.out.println(ind.FITNESS);
//		}
		
		System.out.println("*************************************");
		
	}
	
	public static void main(String[] args) {
		
		List<Individual> population = new ArrayList<>();
		
		Algorithm.inputs(population);
		Algorithm.generatePopulation(population);
		Algorithm.scale(population);
//		EvaluateObjectives.evaluateCan(population,population.size());
		EvaluateObjectives.evaluateCan(population, population.size());
		
		int t = 1 , T = 50;
		
		while( t++ < T )
		{
			System.out.println(t);
			show(population);
			
//			selection
			List<Individual> selected = new ArrayList<Individual>();
			Algorithm.selectionOperator( population,selected);
			
//			System.out.println("Selected");
//			show(selected);
			
//			cross over
			List<Individual> offsprings = new ArrayList<Individual>();
			Algorithm.crossover(selected,offsprings);
//			System.out.println("cross-over");
//			show(offsprings);
			
//			mutation
			Algorithm.mutation(offsprings);
			Algorithm.copy_details(population, offsprings);
			Algorithm.scale(offsprings);
//			EvaluateObjectives.evaluateCan(offsprings,offsprings.size());

			EvaluateObjectives.evaluateCan(population, population.size());
//			System.out.println("mutation");
//			show(offsprings);
			
//			survival(mue+lamda) starategy
			
			PriorityQueue<Individual> queue = new PriorityQueue<Individual>(new ComparatorSortAsc());
			List<Individual> survived = new ArrayList<Individual>();
			
			for(int i=0;i<population.size();i++)
			{
				queue.offer(population.get(i));

				queue.offer(offsprings.get(i));
			}
			
			for(int i=0;i<population.size();i++)
			{
				survived.add(queue.poll());
			}
			
//			show(survived);
			population.clear();
			Algorithm.copy_survived(population,survived);
		}
		
		show(population);

//		Algorithm.display(population);
		

	}

}
